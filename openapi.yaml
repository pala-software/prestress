openapi: 3.1.1

info:
  title: Prestress API
  version: 0.0.0

servers:
  - url: "{url}"
    variables:
      url:
        default: http://localhost:8080
        description: URL to your Prestress server

paths:
  /{schema}/{table}:
    get:
      summary: Find
      description: Find and retrieve rows from a table
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            minLength: 1
        - name: schema
          in: path
          description: Name of schema or namespace
          required: true
          schema:
            type: string
            minLength: 1
        - name: table
          in: path
          description: Name of table or view
          required: true
          schema:
            type: string
            minLength: 1
        - name: limit
          in: query
          description: Maximum number of rows to return
          required: false
          schema:
            type: integer
            minimum: 1
        - name: offset
          in: query
          description: Offset of the result set
          required: false
          schema:
            type: integer
            minimum: 0
        - name: where
          in: query
          description: Key-value pairs to reduce result set with (eg. where[column]=value)
          required: false
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: string
          example: { "column-1": 1, "column-2": "value 1" }
      responses:
        200:
          summary: Success
          description: Find was successful and rows are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
              example:
                [
                  { "column-1": 1, "column-2": "value 1" },
                  { "column-1": 2, "column-2": "value 2" },
                ]
        401:
          summary: Unauthorized
          description: Authorization failed
        403:
          summary: Forbidden
          description: Permission denied
          content:
            text/plain:
              example: |
                permission denied for table example
        404:
          summary: Not found
          description: Invalid path or resource not found
          content:
            text/plain:
              example: |
                relation "public.example" does not exist
        500:
          summary: Internal server error
          description: Unexpected error happened
    post:
      summary: Create
      description: Insert rows into a table
      parameters:
        - name: schema
          in: path
          description: Name of schema or namespace
          required: true
          schema:
            type: string
            minLength: 1
        - name: table
          in: path
          description: Name of table or view
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        description: ""
        content:
          application/json:
            description: ""
            schema:
              type: object
              additionalProperties: true
            example: { "column-1": 1, "column-2": "value 1" }
        required: true
      responses:
        201:
          summary: Success
          description: Rows inserted successfully
        401:
          summary: Unauthorized
          description: Authorization failed
        403:
          summary: Forbidden
          description: Permission denied
          content:
            text/plain:
              example: |
                permission denied for table example
        404:
          summary: Not found
          description: Invalid path or resource not found
          content:
            text/plain:
              example: |
                relation "public.example" does not exist
        500:
          summary: Internal server error
          description: Unexpected error happened

    patch:
      summary: Update
      description: Update rows
      parameters:
        - name: schema
          in: path
          description: Name of schema or namespace
          required: true
          schema:
            type: string
            minLength: 1
        - name: table
          in: path
          description: Name of table or view
          required: true
          schema:
            type: string
            minLength: 1
        - name: where
          in: query
          description: Key-value pairs to select row to update (eg. where[column]=value)
          required: false
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: string
          example: { "column-1": 1, "column-2": "value 1" }
      requestBody:
        description: ""
        content:
          application/json:
            description: ""
            schema:
              type: object
              additionalProperties: true
            example: { "column-1": 1, "column-2": "value 1" }
        required: true
      responses:
        204:
          summary: Success
          description: Rows updated successfully
        401:
          summary: Unauthorized
          description: Authorization failed
        403:
          summary: Forbidden
          description: Permission denied
          content:
            text/plain:
              example: |
                permission denied for table example
        404:
          summary: Not found
          description: Invalid path or resource not found
          content:
            text/plain:
              example: |
                relation "public.example" does not exist
        500:
          summary: Internal server error
          description: Unexpected error happened

    delete:
      summary: Delete
      description: Delete rows
      parameters:
        - name: schema
          in: path
          description: Name of schema or namespace
          required: true
          schema:
            type: string
            minLength: 1
        - name: table
          in: path
          description: Name of table or view
          required: true
          schema:
            type: string
            minLength: 1
        - name: where
          in: query
          description: Key-value pairs to select row to delete (eg. where[column]=value)
          required: false
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: string
          example: { "column-1": 1, "column-2": "value 1" }
      responses:
        204:
          summary: Success
          description: Rows deleted successfully
        401:
          summary: Unauthorized
          description: Authorization failed
        403:
          summary: Forbidden
          description: Permission denied
          content:
            text/plain:
              example: |
                permission denied for table example
        404:
          summary: Not found
          description: Invalid path or resource not found
          content:
            text/plain:
              example: |
                relation "public.example" does not exist

  /{schema}/{table}/subscription:
    get:
      summary: Subscribe
      description: Subscribe to changes to table
      parameters:
        - name: schema
          in: path
          description: Name of schema or namespace
          required: true
          schema:
            type: string
            minLength: 1
        - name: table
          in: path
          description: Name of table or view
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        200:
          description: Event stream successfully started
          content:
            text/event-stream:
              example: |
                event: change
                data: {"op": "INSERT", key: [1], data: {"column-1": 1, "column-2": "value 1"}}

                event:change
                data: {"op": "UPDATE", key: [1], data: {"column-1": 1, "column-2": "value 2"}}
        401:
          summary: Unauthorized
          description: Authorization failed
        403:
          summary: Forbidden
          description: Permission denied
          content:
            text/plain:
              example: |
                permission denied for table example
        404:
          summary: Not found
          description: Invalid path or resource not found
          content:
            text/plain:
              example: |
                relation "public.example" does not exist

components:
  securitySchemes:
    token:
      type: http
      scheme: Bearer

security:
  - {}
  - token: []
